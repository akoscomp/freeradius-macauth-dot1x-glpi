sql {
	dialect = "mysql"
	driver = "rlm_sql_${dialect}"

	mysql {
		# If any of the files below are set, TLS encryption is enabled
		#tls {
		#	ca_file = "/etc/ssl/certs/my_ca.crt"
		#	ca_path = "/etc/ssl/certs/"
		#	certificate_file = "/etc/ssl/certs/private/client.crt"
		#	private_key_file = "/etc/ssl/certs/private/client.key"
		#	cipher = "DHE-RSA-AES256-SHA:AES128-SHA"

		#	tls_required = yes
		#	tls_check_cert = no
		#	tls_check_cert_cn = no
		#}

		# If yes, (or auto and libmysqlclient reports warnings are
		# available), will retrieve and log additional warnings from
		# the server if an error has occured. Defaults to 'auto'
		warnings = auto
	}


	# Connection info:
	#
  server = "lan-db-mariadb"
  port = 3306
  login = "radius"
  password = "2G97w4ajcNZ7kMebpLNmBKL9"

  radius_db = "radius"

  acct_table1 = "radacct"
  acct_table2 = "radacct"

  # Allow for storing data after authentication
  postauth_table = "radpostauth"

  # Tables containing 'check' items
  authcheck_table = "radcheck"
  groupcheck_table = "radgroupcheck"

  # Tables containing 'reply' items
  authreply_table = "radreply"
  groupreply_table = "radgroupreply"

  # Table to keep group info
  usergroup_table = "radusergroup"

  # Remove stale session if checkrad does not see a double login
  delete_stale_sessions = yes

  # Write SQL queries to a logfile.
  logfile = ${logdir}/sqllog.sql

	pool {
		#  Connections to create during module instantiation.
		#  If the server cannot create specified number of
		#  connections during instantiation it will exit.
		#  Set to 0 to allow the server to start without the
		#  database being available.
		start = ${thread[pool].start_servers}

		#  Minimum number of connections to keep open
		min = ${thread[pool].min_spare_servers}

		#  Maximum number of connections
		#
		#  If these connections are all in use and a new one
		#  is requested, the request will NOT get a connection.
		#
		#  Setting 'max' to LESS than the number of threads means
		#  that some threads may starve, and you will see errors
		#  like 'No connections available and at max connection limit'
		#
		#  Setting 'max' to MORE than the number of threads means
		#  that there are more connections than necessary.
		max = ${thread[pool].max_servers}

		#  Spare connections to be left idle
		#
		#  NOTE: Idle connections WILL be closed if "idle_timeout"
		#  is set.  This should be less than or equal to "max" above.
		spare = ${thread[pool].max_spare_servers}

		#  Number of uses before the connection is closed
		#
		#  0 means "infinite"
		uses = 0

		#  The number of seconds to wait after the server tries
		#  to open a connection, and fails.  During this time,
		#  no new connections will be opened.
		retry_delay = 30

		# The lifetime (in seconds) of the connection
		lifetime = 0

		#  idle timeout (in seconds).  A connection which is
		#  unused for this length of time will be closed.
		idle_timeout = 60

		#  NOTE: All configuration settings are enforced.  If a
		#  connection is closed because of "idle_timeout",
		#  "uses", or "lifetime", then the total number of
		#  connections MAY fall below "min".  When that
		#  happens, it will open a new connection.  It will
		#  also log a WARNING message.
		#
		#  The solution is to either lower the "min" connections,
		#  or increase lifetime/idle_timeout.
	}

	# Set to 'yes' to read radius clients from the database ('nas' table)
	# Clients will ONLY be read on server startup.
	#
	#  A client can be link to a virtual server via the SQL
	#  module.  This link is done via the following process:
	#
	#  If there is no listener in a virtual server, SQL clients
	#  are added to the global list for that virtual server.
	#
	#  If there is a listener, and the first listener does not
	#  have a "clients=..." configuration item, SQL clients are
	#  added to the global list.
	#
	#  If there is a listener, and the first one does have a
	#  "clients=..." configuration item, SQL clients are added to
	#  that list.  The client { ...} ` configured in that list are
	#  also added for that listener.
	#
	#  The only issue is if you have multiple listeners in a
	#  virtual server, each with a different client list, then
	#  the SQL clients are added only to the first listener.
	#
#	read_clients = yes

	# Table to keep radius client info
	client_table = "nas"

	#
	# The group attribute specific to this instance of rlm_sql
	#

	# This entry should be used for additional instances (sql foo {})
	# of the SQL module.
#	group_attribute = "${.:instance}-SQL-Group"

	# This entry should be used for the default instance (sql {})
	# of the SQL module.
	group_attribute = "SQL-Group"

	# Read database-specific queries
	$INCLUDE ${modconfdir}/${.:name}/main/${dialect}/queries.conf
}
